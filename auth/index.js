// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var authenticated, bearer, BearerStrategy, configure, configureIO, express, ioAuthFail, ioAuthSuccess, local, LocalStrategy, passport, psioAuth, userDAO;
  passport = require('passport');
  LocalStrategy = require('passport-local').Strategy;
  BearerStrategy = require('passport-http-bearer').Strategy;
  psioAuth = require('passport.socketio');
  express = require('express.io');
  userDAO = require('../services/userDAO');
  configure = function () {
    passport.use(new LocalStrategy(function (username, password, done) {
      var checkPass;
      checkPass = function (user) {
        console.log(user);
        if (!user)
          done(null, false, { message: 'No user' });
        if (user.password !== userDAO.hashPass(password)) {
          done(null, false, { message: 'Wrong password' });
        } else {
          done(null, user);
        }
        return this;
      };
      console.log('local auth');
      userDAO.find(username).then(checkPass).fail(done).done();
      return this;
    }));
    passport.use(new BearerStrategy(function (token, done) {
      console.log('token auth');
      return userDAO.findByToken(token).then(function (user) {
        if (!user) {
          return done(null, false, { message: 'Wrong token' });
        } else {
          return done(null, user);
        }
      }).fail(done);
    }));
    passport.serializeUser(function (user, done) {
      return done(null, user.username);
    });
    return passport.deserializeUser(function (username, done) {
      return userDAO.find(username).then(function (user) {
        return done(null, user);
      }).fail(function (err) {
        return done(err);
      }).done();
    });
  };
  configureIO = function () {
    return express.io.set('authorization', psioAuth.authorize({
      cookieParser: express.cookieParser,
      secret: 'somesesi1onSikrit09#123',
      success: ioAuthSuccess,
      fail: ioAuthFail
    }));
  };
  ioAuthSuccess = function (data, accept) {
    return accept(null, true);
  };
  ioAuthFail = function (data, msg, error, accept) {
    if (error)
      throw new Error(error);
    return accept(null, false);
  };
  local = function () {
    return passport.authenticate('local');
  };
  bearer = function () {
    return passport.authenticate('bearer', { session: false });
  };
  authenticated = function (req, res, next) {
    if (req.user) {
      return next();
    } else {
      return next('Not authenticated');
    }
  };
  module.exports = {
    local: local,
    bearer: bearer,
    configure: configure,
    authenticated: authenticated,
    configureIO: configureIO
  };
}.call(this);

//# sourceMappingURL=index.js.map
