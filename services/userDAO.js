// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var create, dump, find, findByToken, generateToken, hashPass, NUM_ITERATIONS, SALT, sjcl, update, userDB, vow;
  sjcl = require('sjcl');
  vow = require('vow');
  SALT = 'salt_541';
  NUM_ITERATIONS = 100;
  userDB = {
    _idSequence: 0,
    entries: []
  };
  find = function (username) {
    var def, usr;
    def = vow.defer();
    usr = userDB.entries.filter(function (it) {
      return it.username === username;
    })[0];
    def.resolve(usr);
    return def.promise();
  };
  findByToken = function (token) {
    var def, usr;
    def = vow.defer();
    usr = userDB.entries.filter(function (it) {
      return it.token === token;
    })[0];
    def.resolve(usr);
    return def.promise();
  };
  create = function (user) {
    var def;
    def = vow.defer();
    user.password = hashPass(user.password);
    user.id = ++userDB._idSequence;
    user.token = generateToken();
    userDB.entries.push(user);
    def.resolve(user);
    return def.promise();
  };
  update = function (user) {
    var def, usr;
    def = vow.defer();
    usr = find(user.username);
    if (user.password)
      usr.password = hashPass(user.password);
    if (user.todos)
      usr.todos = user.todos;
    if (user.token)
      usr.token = user.token;
    def.resolve(usr);
    return def.promise();
  };
  hashPass = function (pass) {
    return sjcl.codec.hex.fromBits(sjcl.misc.pbkdf2(pass, sjcl.codec.utf8String.toBits(SALT, NUM_ITERATIONS)));
  };
  generateToken = function () {
    var rand;
    rand = function () {
      return Math.random().toString(36).substr(2);
    };
    return rand() + rand();
  };
  dump = function () {
    return console.dir(userDB.entries);
  };
  module.exports = {
    find: find,
    findByToken: findByToken,
    create: create,
    update: update,
    hashPass: hashPass,
    dump: dump
  };
}.call(this);

//# sourceMappingURL=userDAO.js.map
